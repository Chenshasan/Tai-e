[ {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"DES\"",
  "sourceMethod" : "<pro.tools.security.ToolDES: java.security.Key toKey(byte[])>",
  "callSite" : "<pro.tools.security.ToolDES: java.security.Key toKey(byte[])>[4@L56] keyFactory = invokestatic javax.crypto.SecretKeyFactory.getInstance($-c5)",
  "var" : "$-c5",
  "constantValue" : "DES",
  "calleeMethod" : "<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>",
  "subSignature" : "java.security.Key toKey(byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"DESede\"",
  "sourceMethod" : "<pro.tools.security.ToolDESede: java.security.Key toKey(byte[])>",
  "callSite" : "<pro.tools.security.ToolDESede: java.security.Key toKey(byte[])>[4@L53] keyFactory = invokestatic javax.crypto.SecretKeyFactory.getInstance($-c5)",
  "var" : "$-c5",
  "constantValue" : "DESede",
  "calleeMethod" : "<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>",
  "subSignature" : "java.security.Key toKey(byte[])"
}, {
  "judgeType" : "Number Size",
  "message" : "The number size is not allowed for the API",
  "sourceStmt" : "$-c7 = 512",
  "sourceMethod" : "<pro.tools.security.ToolPBE: byte[] encrypt(byte[],java.lang.String,byte[])>",
  "callSite" : "<pro.tools.security.ToolPBE: byte[] encrypt(byte[],java.lang.String,byte[])>[3@L115] invokespecial $-v6.<init>(salt, $-c7)",
  "var" : "$-c7",
  "constantValue" : "512",
  "calleeMethod" : "<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>",
  "numberSize" : "1000-50000",
  "subSignature" : "byte[] encrypt(byte[],java.lang.String,byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"HmacMD5\"",
  "sourceMethod" : "<pro.tools.security.md.ToolMAC: byte[] initHmacMD5Key()>",
  "callSite" : "<pro.tools.security.md.ToolMAC: byte[] initHmacMD5Key()>[1@L32] keyGenerator = invokestatic javax.crypto.KeyGenerator.getInstance($-c2)",
  "var" : "$-c2",
  "constantValue" : "HmacMD5",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "byte[] initHmacMD5Key()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"DESede\"",
  "sourceMethod" : "<pro.tools.security.ToolDESede: byte[] initKey()>",
  "callSite" : "<pro.tools.security.ToolDESede: byte[] initKey()>[1@L129] kg = invokestatic javax.crypto.KeyGenerator.getInstance($-c2)",
  "var" : "$-c2",
  "constantValue" : "DESede",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "byte[] initKey()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"DES\"",
  "sourceMethod" : "<pro.tools.security.ToolDES: byte[] initKey()>",
  "callSite" : "<pro.tools.security.ToolDES: byte[] initKey()>[1@L134] kg = invokestatic javax.crypto.KeyGenerator.getInstance($-c2)",
  "var" : "$-c2",
  "constantValue" : "DES",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "byte[] initKey()"
}, {
  "judgeType" : "Forbidden Method",
  "message" : "The method is forbidden from being used",
  "callSite" : "<pro.tools.security.ToolPBE: java.security.Key toKey(java.lang.String)>[2@L84] invokespecial $-v4.<init>($-v5)",
  "calleeMethod" : "<javax.crypto.spec.PBEKeySpec: void <init>(char[])>",
  "subSignature" : "java.security.Key toKey(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c3 = \"MD4\"",
  "sourceMethod" : "<pro.tools.security.md.ToolMD4: byte[] encodeMD4(byte[])>",
  "callSite" : "<pro.tools.security.md.ToolMD4: byte[] encodeMD4(byte[])>[4@L36] md = invokestatic java.security.MessageDigest.getInstance($-c3)",
  "var" : "$-c3",
  "constantValue" : "MD4",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "byte[] encodeMD4(byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"MD2\"",
  "sourceMethod" : "<pro.tools.security.md.ToolMD2: byte[] encodeMD2(byte[])>",
  "callSite" : "<pro.tools.security.md.ToolMD2: byte[] encodeMD2(byte[])>[1@L30] md = invokestatic java.security.MessageDigest.getInstance($-c2)",
  "var" : "$-c2",
  "constantValue" : "MD2",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "byte[] encodeMD2(byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"SHA\"",
  "sourceMethod" : "<pro.tools.security.md.ToolSHA1: byte[] encodeSHA(byte[])>",
  "callSite" : "<pro.tools.security.md.ToolSHA1: byte[] encodeSHA(byte[])>[1@L30] md = invokestatic java.security.MessageDigest.getInstance($-c2)",
  "var" : "$-c2",
  "constantValue" : "SHA",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "byte[] encodeSHA(byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c3 = \"MD5\"",
  "sourceMethod" : "<pro.tools.security.md.ToolMD5: byte[] encodeMD5(byte[])>",
  "callSite" : "<pro.tools.security.md.ToolMD5: byte[] encodeMD5(byte[])>[4@L35] md = invokestatic java.security.MessageDigest.getInstance($-c3)",
  "var" : "$-c3",
  "constantValue" : "MD5",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "byte[] encodeMD5(byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c4 = \"DESede/ECB/PKCS5Padding\"",
  "sourceMethod" : "<pro.tools.security.ToolDESede: byte[] encrypt(byte[],byte[])>",
  "callSite" : "<pro.tools.security.ToolDESede: byte[] encrypt(byte[],byte[])>[2@L110] cipher = invokestatic javax.crypto.Cipher.getInstance($-c4)",
  "var" : "$-c4",
  "constantValue" : "DESede/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] encrypt(byte[],byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c8 = \"PBEWithMD5AndTripleDES\"",
  "sourceMethod" : "<pro.tools.security.ToolPBE: byte[] encrypt(byte[],java.lang.String,byte[])>",
  "callSite" : "<pro.tools.security.ToolPBE: byte[] encrypt(byte[],java.lang.String,byte[])>[6@L118] cipher = invokestatic javax.crypto.Cipher.getInstance($-c8)",
  "var" : "$-c8",
  "constantValue" : "PBEWithMD5AndTripleDES",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] encrypt(byte[],java.lang.String,byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c4 = \"IDEA/ECB/PKCS5Padding\"",
  "sourceMethod" : "<pro.tools.security.ToolIDEA: byte[] encrypt(byte[],byte[])>",
  "callSite" : "<pro.tools.security.ToolIDEA: byte[] encrypt(byte[],byte[])>[2@L106] cipher = invokestatic javax.crypto.Cipher.getInstance($-c4)",
  "var" : "$-c4",
  "constantValue" : "IDEA/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] encrypt(byte[],byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c4 = \"DES/ECB/PKCS5PADDING\"",
  "sourceMethod" : "<pro.tools.security.ToolDES: byte[] encrypt(byte[],byte[])>",
  "callSite" : "<pro.tools.security.ToolDES: byte[] encrypt(byte[],byte[])>[2@L109] cipher = invokestatic javax.crypto.Cipher.getInstance($-c4)",
  "var" : "$-c4",
  "constantValue" : "DES/ECB/PKCS5PADDING",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] encrypt(byte[],byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"AES\"",
  "sourceMethod" : "<pro.tools.security.ToolDH: byte[] encrypt(byte[],byte[])>",
  "callSite" : "<pro.tools.security.ToolDH: byte[] encrypt(byte[],byte[])>[5@L166] cipher = invokestatic javax.crypto.Cipher.getInstance($-v6)",
  "var" : "$-v6",
  "constantValue" : "AES",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] encrypt(byte[],byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c4 = \"AES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<pro.tools.security.ToolAES: byte[] encrypt(byte[],byte[])>",
  "callSite" : "<pro.tools.security.ToolAES: byte[] encrypt(byte[],byte[])>[2@L114] cipher = invokestatic javax.crypto.Cipher.getInstance($-c4)",
  "var" : "$-c4",
  "constantValue" : "AES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] encrypt(byte[],byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c4 = \"DES/ECB/PKCS5PADDING\"",
  "sourceMethod" : "<pro.tools.security.ToolDES: byte[] decrypt(byte[],byte[])>",
  "callSite" : "<pro.tools.security.ToolDES: byte[] decrypt(byte[],byte[])>[2@L82] cipher = invokestatic javax.crypto.Cipher.getInstance($-c4)",
  "var" : "$-c4",
  "constantValue" : "DES/ECB/PKCS5PADDING",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] decrypt(byte[],byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"AES\"",
  "sourceMethod" : "<pro.tools.security.ToolDH: byte[] decrypt(byte[],byte[])>",
  "callSite" : "<pro.tools.security.ToolDH: byte[] decrypt(byte[],byte[])>[5@L191] cipher = invokestatic javax.crypto.Cipher.getInstance($-v6)",
  "var" : "$-v6",
  "constantValue" : "AES",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] decrypt(byte[],byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c8 = \"PBEWithMD5AndTripleDES\"",
  "sourceMethod" : "<pro.tools.security.ToolPBE: byte[] decrypt(byte[],java.lang.String,byte[])>",
  "callSite" : "<pro.tools.security.ToolPBE: byte[] decrypt(byte[],java.lang.String,byte[])>[5@L150] cipher = invokestatic javax.crypto.Cipher.getInstance($-c8)",
  "var" : "$-c8",
  "constantValue" : "PBEWithMD5AndTripleDES",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] decrypt(byte[],java.lang.String,byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c4 = \"IDEA/ECB/PKCS5Padding\"",
  "sourceMethod" : "<pro.tools.security.ToolIDEA: byte[] decrypt(byte[],byte[])>",
  "callSite" : "<pro.tools.security.ToolIDEA: byte[] decrypt(byte[],byte[])>[2@L80] cipher = invokestatic javax.crypto.Cipher.getInstance($-c4)",
  "var" : "$-c4",
  "constantValue" : "IDEA/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] decrypt(byte[],byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c4 = \"DESede/ECB/PKCS5Padding\"",
  "sourceMethod" : "<pro.tools.security.ToolDESede: byte[] decrypt(byte[],byte[])>",
  "callSite" : "<pro.tools.security.ToolDESede: byte[] decrypt(byte[],byte[])>[2@L81] cipher = invokestatic javax.crypto.Cipher.getInstance($-c4)",
  "var" : "$-c4",
  "constantValue" : "DESede/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] decrypt(byte[],byte[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c4 = \"AES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<pro.tools.security.ToolAES: byte[] decrypt(byte[],byte[])>",
  "callSite" : "<pro.tools.security.ToolAES: byte[] decrypt(byte[],byte[])>[2@L85] cipher = invokestatic javax.crypto.Cipher.getInstance($-c4)",
  "var" : "$-c4",
  "constantValue" : "AES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] decrypt(byte[],byte[])"
}, {
  "judgeType" : "CompositeRule",
  "issues" : [ {
    "judgeType" : "Number Size",
    "message" : "The number size is not allowed for the API",
    "sourceStmt" : "$-c6 = 512",
    "sourceMethod" : "<pro.tools.security.ToolRSA: java.util.Map initKey()>",
    "callSite" : "<pro.tools.security.ToolRSA: java.util.Map initKey()>[3@L212] invokevirtual keyPairGen.initialize($-c6)",
    "var" : "$-c6",
    "constantValue" : "512",
    "calleeMethod" : "<java.security.KeyPairGenerator: void initialize(int)>",
    "numberSize" : "2048-10000",
    "subSignature" : "java.util.Map initKey()"
  } ]
} ]