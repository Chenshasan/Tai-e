[ {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "<org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostBBCase1: void main(java.lang.String[])>[0@L9] $-v3 = invokestatic javax.net.ssl.SSLSocketFactory.getDefault()",
  "sourceMethod" : "<org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostBBCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostBBCase1: void main(java.lang.String[])>[4@L10] $-v6 = invokevirtual ssf.createSocket($-c4, $-c5)",
  "var" : "ssf",
  "calleeMethod" : "<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.lang.String,int)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Number Size",
  "message" : "The number size is not allowed for the API",
  "sourceStmt" : "$-c0 = \"20\"",
  "sourceMethod" : "<org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase2: void go2()>",
  "callSite" : "<org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase2: void key2()>[10@L28] invokespecial $-v6.<init>(salt, $-v9)",
  "var" : "$-v9",
  "constantValue" : "20",
  "calleeMethod" : "<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>",
  "numberSize" : "1000-50000",
  "subSignature" : "void key2()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c0 = \"http://www.google.com\"",
  "sourceMethod" : "<org.cryptoapi.bench.http.HttpProtocolABICase2: void go2()>",
  "callSite" : "<org.cryptoapi.bench.http.HttpProtocolABICase2: void go()>[4@L23] invokespecial $-v1.<init>($-v3)",
  "var" : "$-v3",
  "constantValue" : "http://www.google.com",
  "calleeMethod" : "<java.net.URL: void <init>(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "url = \"http://www.google.com\"",
  "sourceMethod" : "<org.cryptoapi.bench.http.HttpProtocolABMCCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.http.HttpProtocolABMC1: void go(java.lang.String)>[2@L8] invokespecial $-v3.<init>(url)",
  "var" : "url",
  "constantValue" : "http://www.google.com",
  "calleeMethod" : "<java.net.URL: void <init>(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "url = \"http://insects.myspecies.info/\"",
  "sourceMethod" : "<org.cryptoapi.bench.http.HttpProtocolBBCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.http.HttpProtocolBBCase1: void main(java.lang.String[])>[3@L8] invokespecial $-v3.<init>(url)",
  "var" : "url",
  "constantValue" : "http://insects.myspecies.info/",
  "calleeMethod" : "<java.net.URL: void <init>(java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "url = \"http://www.facebook.com\"",
  "sourceMethod" : "<org.cryptoapi.bench.http.HttpProtocolABPSCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.http.HttpProtocolABPSCase1: void main(java.lang.String[])>[6@L10] invokespecial $-v6.<init>(url)",
  "var" : "url",
  "constantValue" : "http://www.facebook.com",
  "calleeMethod" : "<java.net.URL: void <init>(java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "url = \"http://www.google.com\"",
  "sourceMethod" : "<org.cryptoapi.bench.http.HttpProtocolABICase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.http.HttpProtocolABICase1: void go(java.lang.String)>[2@L15] invokespecial $-v2.<init>(url)",
  "var" : "url",
  "constantValue" : "http://www.google.com",
  "calleeMethod" : "<java.net.URL: void <init>(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "url = \"http://www.google.com\"",
  "sourceMethod" : "<org.cryptoapi.bench.http.HttpProtocolABICase3: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.http.HttpProtocolABICase3: void method2(java.lang.String)>[2@L18] invokespecial $-v2.<init>(url)",
  "var" : "url",
  "constantValue" : "http://www.google.com",
  "calleeMethod" : "<java.net.URL: void <init>(java.lang.String)>",
  "subSignature" : "void method2(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "url = \"http://gmail.com\"",
  "sourceMethod" : "<org.cryptoapi.bench.http.HttpProtocolABSCase1: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.http.CryptoHTTP1: void method1(java.lang.String)>[5@L27] invokespecial $-v5.<init>(passedURL)",
  "var" : "passedURL",
  "constantValue" : "http://gmail.com",
  "calleeMethod" : "<java.net.URL: void <init>(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String)"
}, {
  "judgeType" : "Influencing Factory",
  "message" : "Concerned var in this method has no influencing stmts",
  "calleeMethod" : "<org.cryptoapi.bench.dummyhostnameverifier.DummyHostNameVerifierCase1: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>",
  "subSignature" : "boolean verify(java.lang.String,javax.net.ssl.SSLSession)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c10 = \"HmacMD5\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenmac.BrokenMacBBCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenmac.BrokenMacBBCase1: void main(java.lang.String[])>[8@L16] mac = invokestatic javax.crypto.Mac.getInstance($-c10)",
  "var" : "$-c10",
  "constantValue" : "HmacMD5",
  "calleeMethod" : "<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c10 = \"HmacSHA1\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenmac.BrokenMacBBCase2: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenmac.BrokenMacBBCase2: void main(java.lang.String[])>[8@L16] mac = invokestatic javax.crypto.Mac.getInstance($-c10)",
  "var" : "$-c10",
  "constantValue" : "HmacSHA1",
  "calleeMethod" : "<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v3[$-ci0] = $-ci-94",
  "sourceMethod" : "<org.cryptoapi.bench.staticsalts.StaticSaltsABSCase1: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.staticsalts.CryptoStaticSalt1: void method1(byte[])>[4@L27] invokespecial $-v4.<init>(passedSalt, count)",
  "var" : "passedSalt",
  "calleeMethod" : "<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>",
  "subSignature" : "void method1(byte[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v6[$-ci0] = $-ci-94",
  "sourceMethod" : "<org.cryptoapi.bench.staticsalts.StaticSaltsABICase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.staticsalts.StaticSaltsABICase1: void key2(byte[],int)>[2@L16] invokespecial $-v4.<init>(salt, count)",
  "var" : "salt",
  "calleeMethod" : "<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>",
  "subSignature" : "void key2(byte[],int)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "<org.cryptoapi.bench.untrustedprng.UntrustedPRNGCase1: void main(java.lang.String[])>[5@L12] invokevirtual random.nextBytes(salt)",
  "sourceMethod" : "<org.cryptoapi.bench.untrustedprng.UntrustedPRNGCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.untrustedprng.UntrustedPRNGCase1: void main(java.lang.String[])>[8@L14] invokespecial $-v7.<init>(salt, count)",
  "var" : "salt",
  "calleeMethod" : "<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v6[$-ci0] = $-ci-94",
  "sourceMethod" : "<org.cryptoapi.bench.staticsalts.StaticSaltsABMCCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.staticsalts.StaticSaltsABMC1: void key2(byte[],int)>[2@L8] invokespecial $-v4.<init>(salt, count)",
  "var" : "salt",
  "calleeMethod" : "<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>",
  "subSignature" : "void key2(byte[],int)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v4[$-ci0] = $-ci-94",
  "sourceMethod" : "<org.cryptoapi.bench.staticsalts.StaticSaltsABICase3: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.staticsalts.StaticSaltsABICase3: void method2(byte[],int)>[2@L18] invokespecial $-v3.<init>(salt, count)",
  "var" : "salt",
  "calleeMethod" : "<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>",
  "subSignature" : "void method2(byte[],int)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c0 = \"12345\"",
  "sourceMethod" : "<org.cryptoapi.bench.staticsalts.StaticSaltsABICase2: void go2()>",
  "callSite" : "<org.cryptoapi.bench.staticsalts.StaticSaltsABICase2: void key2(int)>[7@L27] invokespecial $-v3.<init>($-v5, count)",
  "var" : "$-v5",
  "calleeMethod" : "<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>",
  "subSignature" : "void key2(int)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v5[$-ci0] = $-ci-94",
  "sourceMethod" : "<org.cryptoapi.bench.staticsalts.StaticSaltsBBCase1: void key2()>",
  "callSite" : "<org.cryptoapi.bench.staticsalts.StaticSaltsBBCase1: void key2()>[6@L15] invokespecial $-v8.<init>(salt, count)",
  "var" : "salt",
  "calleeMethod" : "<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>",
  "subSignature" : "void key2()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v8[$-ci0] = $-ci-94",
  "sourceMethod" : "<org.cryptoapi.bench.staticsalts.StaticSaltsABPSCase1: void key2(int)>",
  "callSite" : "<org.cryptoapi.bench.staticsalts.StaticSaltsABPSCase1: void key2(int)>[11@L19] invokespecial $-v11.<init>(salt, count)",
  "var" : "salt",
  "calleeMethod" : "<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>",
  "subSignature" : "void key2(int)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "key = \"changeit\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3: void method2(java.lang.String)>[9@L27] invokevirtual ks.load($-v7, $-v8)",
  "var" : "$-v8",
  "calleeMethod" : "<java.security.KeyStore: void load(java.io.InputStream,char[])>",
  "subSignature" : "void method2(java.lang.String)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c0 = \"changeit\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2: void go2()>",
  "callSite" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2: void go()>[9@L33] invokevirtual ks.load($-v6, $-v7)",
  "var" : "$-v7",
  "calleeMethod" : "<java.security.KeyStore: void load(java.io.InputStream,char[])>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "key = \"changeit\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABSCase1: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.predictablekeystorepassword.CryptoPredictableKeyStorePassword1: void method1(java.lang.String)>[10@L34] invokevirtual ks.load($-v7, $-v8)",
  "var" : "$-v8",
  "calleeMethod" : "<java.security.KeyStore: void load(java.io.InputStream,char[])>",
  "subSignature" : "void method1(java.lang.String)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "key = \"changeit\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMCCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1: void go(java.lang.String)>[9@L17] invokevirtual ks.load($-v7, $-v8)",
  "var" : "$-v8",
  "calleeMethod" : "<java.security.KeyStore: void load(java.io.InputStream,char[])>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "defaultKey = \"changeit\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1: void go()>",
  "callSite" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1: void go()>[10@L23] invokevirtual ks.load($-v7, $-v8)",
  "var" : "$-v8",
  "calleeMethod" : "<java.security.KeyStore: void load(java.io.InputStream,char[])>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c7 = \"afix\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABHCase2: void go()>",
  "callSite" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABHCase2: void go()>[27@L31] invokevirtual ks.load($-v19, $-v20)",
  "var" : "$-v20",
  "calleeMethod" : "<java.security.KeyStore: void load(java.io.InputStream,char[])>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "defaultKey = \"changeit\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1: void go(int)>",
  "callSite" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1: void go(int)>[16@L28] invokevirtual ks.load($-v12, $-v13)",
  "var" : "$-v13",
  "calleeMethod" : "<java.security.KeyStore: void load(java.io.InputStream,char[])>",
  "subSignature" : "void go(int)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "key = \"changeit\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1: void go(java.lang.String)>[9@L22] invokevirtual ks.load($-v7, $-v8)",
  "var" : "$-v8",
  "calleeMethod" : "<java.security.KeyStore: void load(java.io.InputStream,char[])>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c13 = \"abcde\"",
  "sourceMethod" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2: void go()>",
  "callSite" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2: void go()>[26@L31] invokespecial $-v22.<init>(bytes)",
  "var" : "bytes",
  "calleeMethod" : "<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c2 = \"abcde\"",
  "sourceMethod" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3: void method2(byte[])>[1@L12] invokespecial $-v5.<init>(bytes)",
  "var" : "bytes",
  "calleeMethod" : "<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
  "subSignature" : "void method2(byte[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c4 = \"abcde\"",
  "sourceMethod" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1: void go(byte[])>[1@L12] invokespecial $-v6.<init>(bytes)",
  "var" : "bytes",
  "calleeMethod" : "<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
  "subSignature" : "void go(byte[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c8 = \"abcde\"",
  "sourceMethod" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1: void go()>",
  "callSite" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1: void go()>[8@L18] invokespecial $-v9.<init>(bytes)",
  "var" : "bytes",
  "calleeMethod" : "<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c0 = \"abcde\"",
  "sourceMethod" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2: void go2()>",
  "callSite" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2: void go()>[6@L17] invokespecial $-v5.<init>($-v7)",
  "var" : "$-v7",
  "calleeMethod" : "<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c8 = \"abcde\"",
  "sourceMethod" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1: void go()>",
  "callSite" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1: void go()>[9@L21] invokespecial $-v10.<init>(bytes)",
  "var" : "bytes",
  "calleeMethod" : "<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c2 = \"abcde\"",
  "sourceMethod" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABSCase1: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1: void method1(byte[])>[2@L32] invokespecial $-v6.<init>(passedIV)",
  "var" : "passedIV",
  "calleeMethod" : "<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
  "subSignature" : "void method1(byte[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c4 = \"abcde\"",
  "sourceMethod" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMCCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1: void go(byte[])>[1@L14] invokespecial $-v6.<init>(bytes)",
  "var" : "bytes",
  "calleeMethod" : "<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
  "subSignature" : "void go(byte[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c11 = \"abcde\"",
  "sourceMethod" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1: void go(int)>",
  "callSite" : "<org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1: void go(int)>[14@L24] invokespecial $-v14.<init>(bytes)",
  "var" : "bytes",
  "calleeMethod" : "<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
  "subSignature" : "void go(int)"
}, {
  "judgeType" : "Influencing Factory",
  "message" : "Concerned var in this method has no influencing stmts",
  "calleeMethod" : "<org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase2: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>",
  "subSignature" : "void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)"
}, {
  "judgeType" : "Influencing Factory",
  "message" : "Concerned var in this method has no influencing stmts",
  "calleeMethod" : "<org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase3: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>",
  "subSignature" : "void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c0 = \"RC2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8: void go2()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8: void go()>[6@L17] cipher = invokestatic javax.crypto.Cipher.getInstance($-v7)",
  "var" : "$-v7",
  "constantValue" : "RC2",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"RC2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14: void method1(java.lang.String)>[2@L18] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "RC2",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"RC4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABSCase3: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.Crypto4: byte[] encrypt(java.lang.String,java.lang.String)>[7@L30] cipher = invokestatic javax.crypto.Cipher.getInstance($-v10)",
  "var" : "$-v10",
  "constantValue" : "RC4",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] encrypt(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"IDEA\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABSCase5: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.Crypto6: byte[] encrypt(java.lang.String,java.lang.String)>[7@L31] cipher = invokestatic javax.crypto.Cipher.getInstance($-v10)",
  "var" : "$-v10",
  "constantValue" : "IDEA",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] encrypt(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"Blowfish\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2: void go()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2: void go()>[4@L14] cipher = invokestatic javax.crypto.Cipher.getInstance($-c5)",
  "var" : "$-c5",
  "constantValue" : "Blowfish",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"AES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1: void go(java.lang.String)>[3@L14] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "AES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c0 = \"RC4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7: void go2()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7: void go()>[6@L17] cipher = invokestatic javax.crypto.Cipher.getInstance($-v7)",
  "var" : "$-v7",
  "constantValue" : "RC4",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"DES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1: void go()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1: void go()>[4@L15] cipher = invokestatic javax.crypto.Cipher.getInstance($-c5)",
  "var" : "$-c5",
  "constantValue" : "DES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"DES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11: void method1(java.lang.String,java.lang.String)>[2@L18] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "DES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"AES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3: void method1(java.lang.String)>[3@L18] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "AES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"IDEA\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9: void go(java.lang.String)>[2@L14] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "IDEA",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"AES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1: void go()>",
  "callSite" : "<org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1: void go()>[4@L14] cipher = invokestatic javax.crypto.Cipher.getInstance($-c5)",
  "var" : "$-c5",
  "constantValue" : "AES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c6 = \"RC4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3: void go(int)>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3: void go(int)>[4@L14] cipher = invokestatic javax.crypto.Cipher.getInstance($-c6)",
  "var" : "$-c6",
  "constantValue" : "RC4",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(int)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"DES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABSCase1: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.Crypto2: byte[] encrypt(java.lang.String,java.lang.String)>[7@L30] cipher = invokestatic javax.crypto.Cipher.getInstance($-v10)",
  "var" : "$-v10",
  "constantValue" : "DES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] encrypt(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c6 = \"DES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1: void go(int)>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1: void go(int)>[4@L14] cipher = invokestatic javax.crypto.Cipher.getInstance($-c6)",
  "var" : "$-c6",
  "constantValue" : "DES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(int)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"IDEA\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMCCase5: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5: void go(java.lang.String)>[2@L14] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "IDEA",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c0 = \"DES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5: void go2()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5: void go()>[6@L22] cipher = invokestatic javax.crypto.Cipher.getInstance($-v7)",
  "var" : "$-v7",
  "constantValue" : "DES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c6 = \"IDEA\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5: void go(int)>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5: void go(int)>[4@L13] cipher = invokestatic javax.crypto.Cipher.getInstance($-c6)",
  "var" : "$-c6",
  "constantValue" : "IDEA",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(int)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c6 = \"Blowfish\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2: void go(int)>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2: void go(int)>[4@L13] cipher = invokestatic javax.crypto.Cipher.getInstance($-c6)",
  "var" : "$-c6",
  "constantValue" : "Blowfish",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(int)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c6 = \"RC2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4: void go(int)>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4: void go(int)>[4@L14] cipher = invokestatic javax.crypto.Cipher.getInstance($-c6)",
  "var" : "$-c6",
  "constantValue" : "RC2",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(int)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"IDEA\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15: void method1(java.lang.String)>[2@L18] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "IDEA",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"RC2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMCCase4: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4: void go(java.lang.String)>[2@L14] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "RC2",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"RC4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13: void method1(java.lang.String)>[2@L19] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "RC4",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c6 = \"AES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1: void go(int)>",
  "callSite" : "<org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1: void go(int)>[4@L13] cipher = invokestatic javax.crypto.Cipher.getInstance($-c6)",
  "var" : "$-c6",
  "constantValue" : "AES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(int)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"Blowfish\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2: void go(java.lang.String)>[2@L14] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "Blowfish",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"IDEA\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5: void go()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5: void go()>[4@L14] cipher = invokestatic javax.crypto.Cipher.getInstance($-c5)",
  "var" : "$-c5",
  "constantValue" : "IDEA",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"RC2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4: void go(java.lang.String)>[2@L14] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "RC2",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"RC2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABSCase4: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.Crypto5: byte[] encrypt(java.lang.String,java.lang.String)>[7@L31] cipher = invokestatic javax.crypto.Cipher.getInstance($-v10)",
  "var" : "$-v10",
  "constantValue" : "RC2",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] encrypt(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "cryptoAlgo = \"AES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABSCase1: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.ecbcrypto.CryptoECB1: void method1(java.lang.String)>[6@L34] cipher = invokestatic javax.crypto.Cipher.getInstance(passedAlgo)",
  "var" : "passedAlgo",
  "constantValue" : "AES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"Blowfish\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMCCase2: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2: void go(java.lang.String)>[2@L14] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "Blowfish",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"DES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1: void go(java.lang.String,java.lang.String)>[2@L14] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "DES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"DES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMCCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1: void go(java.lang.String,java.lang.String)>[2@L14] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "DES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c0 = \"Blowfish\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6: void go2()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6: void go()>[6@L17] cipher = invokestatic javax.crypto.Cipher.getInstance($-v7)",
  "var" : "$-v7",
  "constantValue" : "Blowfish",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"Blowfish\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12: void method1(java.lang.String)>[2@L17] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "Blowfish",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c0 = \"IDEA\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10: void go2()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10: void go()>[6@L17] cipher = invokestatic javax.crypto.Cipher.getInstance($-v7)",
  "var" : "$-v7",
  "constantValue" : "IDEA",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"AES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMCCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1: void go(java.lang.String)>[3@L15] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "AES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"RC2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4: void go()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4: void go()>[4@L14] cipher = invokestatic javax.crypto.Cipher.getInstance($-c5)",
  "var" : "$-c5",
  "constantValue" : "RC2",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"RC4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3: void go()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3: void go()>[4@L14] cipher = invokestatic javax.crypto.Cipher.getInstance($-c5)",
  "var" : "$-c5",
  "constantValue" : "RC4",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"RC4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3: void go(java.lang.String)>[2@L14] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "RC4",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"Blowfish\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABSCase2: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.Crypto3: byte[] encrypt(java.lang.String,java.lang.String)>[7@L30] cipher = invokestatic javax.crypto.Cipher.getInstance($-v10)",
  "var" : "$-v10",
  "constantValue" : "Blowfish",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "byte[] encrypt(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"RC4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMCCase3: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3: void go(java.lang.String)>[2@L14] cipher = invokestatic javax.crypto.Cipher.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "RC4",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c0 = \"AES/ECB/PKCS5Padding\"",
  "sourceMethod" : "<org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2: void go2()>",
  "callSite" : "<org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2: void go()>[5@L17] cipher = invokestatic javax.crypto.Cipher.getInstance($-v6)",
  "var" : "$-v6",
  "constantValue" : "AES/ECB/PKCS5Padding",
  "calleeMethod" : "<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Influencing Factory",
  "message" : "Concerned var in this method has no influencing stmts",
  "calleeMethod" : "<org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase3: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>",
  "subSignature" : "void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"MD2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABMCCase4: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABMC4: void go(java.lang.String,java.lang.String)>[0@L8] md = invokestatic java.security.MessageDigest.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "MD2",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"MD5\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABSCase2: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.CryptoHash2: void encrypt(java.lang.String,java.lang.String)>[4@L31] md = invokestatic java.security.MessageDigest.getInstance($-v6)",
  "var" : "$-v6",
  "constantValue" : "MD5",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void encrypt(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c3 = \"MD2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashBBCase4: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashBBCase4: void main(java.lang.String[])>[2@L9] md = invokestatic java.security.MessageDigest.getInstance($-c3)",
  "var" : "$-c3",
  "constantValue" : "MD2",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c0 = \"MD2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase8: void go2()>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase8: void go(java.lang.String)>[2@L25] md = invokestatic java.security.MessageDigest.getInstance($-v3)",
  "var" : "$-v3",
  "constantValue" : "MD2",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"MD5\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase2: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase2: void go(java.lang.String,java.lang.String)>[0@L13] md = invokestatic java.security.MessageDigest.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "MD5",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"MD5\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase10: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase10: void method1(java.lang.String,java.lang.String)>[0@L18] md = invokestatic java.security.MessageDigest.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "MD5",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c0 = \"MD4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase7: void go2()>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase7: void go(java.lang.String)>[2@L25] md = invokestatic java.security.MessageDigest.getInstance($-v3)",
  "var" : "$-v3",
  "constantValue" : "MD4",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c3 = \"MD5\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashBBCase2: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashBBCase2: void main(java.lang.String[])>[2@L9] md = invokestatic java.security.MessageDigest.getInstance($-c3)",
  "var" : "$-c3",
  "constantValue" : "MD5",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"MD2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABPSCase4: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABPSCase4: void main(java.lang.String[])>[3@L9] md = invokestatic java.security.MessageDigest.getInstance($-c5)",
  "var" : "$-c5",
  "constantValue" : "MD2",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"MD4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABSCase3: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.CryptoHash3: void encrypt(java.lang.String,java.lang.String)>[4@L31] md = invokestatic java.security.MessageDigest.getInstance($-v6)",
  "var" : "$-v6",
  "constantValue" : "MD4",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void encrypt(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"MD2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase4: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase4: void go(java.lang.String,java.lang.String)>[0@L13] md = invokestatic java.security.MessageDigest.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "MD2",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"MD4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase3: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase3: void go(java.lang.String,java.lang.String)>[0@L13] md = invokestatic java.security.MessageDigest.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "MD4",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"MD2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase12: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase12: void method1(java.lang.String,java.lang.String)>[0@L18] md = invokestatic java.security.MessageDigest.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "MD2",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"MD5\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABPSCase2: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABPSCase2: void main(java.lang.String[])>[3@L9] md = invokestatic java.security.MessageDigest.getInstance($-c5)",
  "var" : "$-c5",
  "constantValue" : "MD5",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c0 = \"MD5\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase6: void go2()>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase6: void go(java.lang.String)>[2@L25] md = invokestatic java.security.MessageDigest.getInstance($-v3)",
  "var" : "$-v3",
  "constantValue" : "MD5",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"SHA1\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABSCase1: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.CryptoHash1: void encrypt(java.lang.String,java.lang.String)>[4@L29] md = invokestatic java.security.MessageDigest.getInstance($-v6)",
  "var" : "$-v6",
  "constantValue" : "SHA1",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void encrypt(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"SHA1\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase1: void go(java.lang.String,java.lang.String)>[0@L13] md = invokestatic java.security.MessageDigest.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "SHA1",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"SHA1\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABPSCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABPSCase1: void main(java.lang.String[])>[3@L9] md = invokestatic java.security.MessageDigest.getInstance($-c5)",
  "var" : "$-c5",
  "constantValue" : "SHA1",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"MD2\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABSCase4: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.CryptoHash4: void encrypt(java.lang.String,java.lang.String)>[4@L31] md = invokestatic java.security.MessageDigest.getInstance($-v6)",
  "var" : "$-v6",
  "constantValue" : "MD2",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void encrypt(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"MD5\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABMCCase2: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABMC2: void go(java.lang.String,java.lang.String)>[0@L8] md = invokestatic java.security.MessageDigest.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "MD5",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c5 = \"MD4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABPSCase3: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABPSCase3: void main(java.lang.String[])>[3@L9] md = invokestatic java.security.MessageDigest.getInstance($-c5)",
  "var" : "$-c5",
  "constantValue" : "MD4",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"SHA1\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase9: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase9: void method1(java.lang.String,java.lang.String)>[0@L18] md = invokestatic java.security.MessageDigest.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "SHA1",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c3 = \"MD4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashBBCase3: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashBBCase3: void main(java.lang.String[])>[2@L9] md = invokestatic java.security.MessageDigest.getInstance($-c3)",
  "var" : "$-c3",
  "constantValue" : "MD4",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c3 = \"SHA1\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashBBCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashBBCase1: void main(java.lang.String[])>[2@L9] md = invokestatic java.security.MessageDigest.getInstance($-c3)",
  "var" : "$-c3",
  "constantValue" : "SHA1",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"SHA1\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABMCCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABMC1: void go(java.lang.String,java.lang.String)>[0@L8] md = invokestatic java.security.MessageDigest.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "SHA1",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c0 = \"SHA1\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase5: void go2()>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase5: void go(java.lang.String)>[2@L25] md = invokestatic java.security.MessageDigest.getInstance($-v3)",
  "var" : "$-v3",
  "constantValue" : "SHA1",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"MD4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABMCCase3: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABMC3: void go(java.lang.String,java.lang.String)>[0@L8] md = invokestatic java.security.MessageDigest.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "MD4",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"MD4\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase11: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokenhash.BrokenHashABICase11: void method1(java.lang.String,java.lang.String)>[0@L18] md = invokestatic java.security.MessageDigest.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "MD4",
  "calleeMethod" : "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v6[$-ci7] = $-ci7",
  "sourceMethod" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABSCase1: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.predictablecryptographickey.Crypto: byte[] method1(java.lang.String,byte[])>[7@L55] invokespecial $-v8.<init>(keyBytes#3, $-v9)",
  "var" : "keyBytes#3",
  "calleeMethod" : "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
  "subSignature" : "byte[] method1(java.lang.String,byte[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v4[$-ci7] = $-ci7",
  "sourceMethod" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyBBCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyBBCase1: void main(java.lang.String[])>[13@L11] invokespecial $-v17.<init>(keyBytes#3, $-c18)",
  "var" : "keyBytes#3",
  "calleeMethod" : "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v1[$-ci7] = $-ci7",
  "sourceMethod" : "<org.cryptoapi.bench.credentialinstring.CredentialInStringABICase2: void <clinit>()>",
  "callSite" : "<org.cryptoapi.bench.credentialinstring.CredentialInStringABICase2: void go()>[4@L27] invokespecial $-v3.<init>(keyBytes#3, $-c4)",
  "var" : "keyBytes#3",
  "calleeMethod" : "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v3[$-ci7] = $-ci7",
  "sourceMethod" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase3: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase3: void method2(byte[])>[4@L18] invokespecial $-v4.<init>(keyBytes#3, $-c5)",
  "var" : "keyBytes#3",
  "calleeMethod" : "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
  "subSignature" : "void method2(byte[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v1[$-ci7] = $-ci7",
  "sourceMethod" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase2: void <clinit>()>",
  "callSite" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase2: void go()>[4@L27] invokespecial $-v3.<init>(keyBytes#3, $-c4)",
  "var" : "keyBytes#3",
  "calleeMethod" : "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "key[$-ci4] = $-ci15",
  "sourceMethod" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase2: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase2: void main(java.lang.String[])>[30@L33] invokespecial $-v33.<init>(keyBytes#3, $-c34)",
  "var" : "keyBytes#3",
  "calleeMethod" : "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v3[$-ci7] = $-ci7",
  "sourceMethod" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase1: void go(byte[])>[3@L16] invokespecial $-v3.<init>(keyBytes#3, $-c4)",
  "var" : "keyBytes#3",
  "calleeMethod" : "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
  "subSignature" : "void go(byte[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v5[$-ci7] = $-ci7",
  "sourceMethod" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABMCCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABMC1: void go(byte[])>[3@L11] invokespecial $-v5.<init>(keyBytes, $-c6)",
  "var" : "keyBytes",
  "calleeMethod" : "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
  "subSignature" : "void go(byte[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "defaultKey = \"defaultkey\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABPSCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABPSCase1: void main(java.lang.String[])>[10@L17] invokespecial $-v8.<init>(keyBytes, $-c9)",
  "var" : "keyBytes",
  "calleeMethod" : "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c0 = \"100\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase4: void go2()>",
  "callSite" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase4: void go()>[6@L24] invokespecial $-v2.<init>($-v4)",
  "var" : "$-v4",
  "calleeMethod" : "<java.security.SecureRandom: void <init>(byte[])>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v8[$-ci1] = $-ci-56",
  "sourceMethod" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABPSCase2: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABPSCase2: void main(java.lang.String[])>[11@L14] invokespecial $-v13.<init>(seed)",
  "var" : "seed",
  "calleeMethod" : "<java.security.SecureRandom: void <init>(byte[])>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v5[$-ci1] = $-ci-56",
  "sourceMethod" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABMCCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABMC1: void go(byte[])>[3@L8] invokevirtual sr.setSeed(seed)",
  "var" : "seed",
  "calleeMethod" : "<java.security.SecureRandom: void setSeed(byte[])>",
  "subSignature" : "void go(byte[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v3[$-ci1] = $-ci-56",
  "sourceMethod" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABSCase1: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.predictableseeds.CryptoPredictableSeed1: void method1(byte[])>[4@L34] invokevirtual sr.setSeed(passedSeed)",
  "var" : "passedSeed",
  "calleeMethod" : "<java.security.SecureRandom: void setSeed(byte[])>",
  "subSignature" : "void method1(byte[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v7[$-ci1] = $-ci-56",
  "sourceMethod" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABPSCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABPSCase1: void main(java.lang.String[])>[10@L13] invokevirtual sr.setSeed(bytes)",
  "var" : "bytes",
  "calleeMethod" : "<java.security.SecureRandom: void setSeed(byte[])>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v3[$-ci1] = $-ci-56",
  "sourceMethod" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase1: void go(byte[])>[3@L13] invokevirtual sr.setSeed(seed)",
  "var" : "seed",
  "calleeMethod" : "<java.security.SecureRandom: void setSeed(byte[])>",
  "subSignature" : "void go(byte[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v1[$-ci1] = $-ci-56",
  "sourceMethod" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase3: void <clinit>()>",
  "callSite" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase3: void go()>[4@L25] invokevirtual sr.setSeed($-v3)",
  "var" : "$-v3",
  "calleeMethod" : "<java.security.SecureRandom: void setSeed(byte[])>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v3[$-ci1] = $-ci-56",
  "sourceMethod" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase5: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase5: void method2(byte[])>[3@L17] invokevirtual sr.setSeed(seed)",
  "var" : "seed",
  "calleeMethod" : "<java.security.SecureRandom: void setSeed(byte[])>",
  "subSignature" : "void method2(byte[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v6[$-ci1] = $-ci-56",
  "sourceMethod" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsBBCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictableseeds.PredictableSeedsBBCase1: void main(java.lang.String[])>[7@L10] invokevirtual sr.setSeed(keyBytes)",
  "var" : "keyBytes",
  "calleeMethod" : "<java.security.SecureRandom: void setSeed(byte[])>",
  "subSignature" : "void main(java.lang.String[])"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "defaultKey = \"saagar\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1: void key()>",
  "callSite" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1: void key()>[10@L22] invokespecial $-v8.<init>($-v9, salt, iterationCount, keyLength)",
  "var" : "$-v9",
  "calleeMethod" : "<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>",
  "subSignature" : "void key()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c0 = \"sagar\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2: void <clinit>()>",
  "callSite" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2: void go()>[8@L33] invokespecial $-v5.<init>($-v6, salt, $-c7, $-ci16)",
  "var" : "$-v6",
  "calleeMethod" : "<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "password = \"sagar\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3: void method2(java.lang.String)>[9@L28] invokespecial $-v8.<init>($-v9, salt, iterationCount, keyLength)",
  "var" : "$-v9",
  "calleeMethod" : "<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>",
  "subSignature" : "void method2(java.lang.String)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "defaultKey = \"saagar\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABPSCase1: void key(int)>",
  "callSite" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABPSCase1: void key(int)>[16@L27] invokespecial $-v12.<init>($-v13, salt, iterationCount, keyLength)",
  "var" : "$-v13",
  "calleeMethod" : "<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>",
  "subSignature" : "void key(int)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c4 = \"\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABSCase1: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.predictablepbepassword.CryptoPredictablePBE: void method1(java.lang.String)>[12@L37] invokespecial $-v10.<init>($-v11, salt, iterationCount, keyLength)",
  "var" : "$-v11",
  "calleeMethod" : "<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>",
  "subSignature" : "void method1(java.lang.String)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-v7[$-ci0] = $-ci115",
  "sourceMethod" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2: void key()>",
  "callSite" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2: void key()>[11@L22] invokespecial $-v12.<init>(defaultKey, salt, iterationCount, keyLength)",
  "var" : "defaultKey",
  "calleeMethod" : "<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>",
  "subSignature" : "void key()"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "password = \"sagar\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMCCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMC1: void key(java.lang.String)>[9@L16] invokespecial $-v8.<init>($-v9, salt, iterationCount, keyLength)",
  "var" : "$-v9",
  "calleeMethod" : "<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>",
  "subSignature" : "void key(java.lang.String)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "password = \"sagar\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1: void go(java.lang.String)>[9@L22] invokespecial $-v8.<init>($-v9, salt, iterationCount, keyLength)",
  "var" : "$-v9",
  "calleeMethod" : "<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Predictable Source",
  "message" : "The value of the API is not well randomized",
  "sourceStmt" : "$-c7 = \"afix\"",
  "sourceMethod" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase2: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase2: void key(java.lang.String)>[9@L30] invokespecial $-v8.<init>($-v9, salt, iterationCount, keyLength)",
  "var" : "$-v9",
  "calleeMethod" : "<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>",
  "subSignature" : "void key(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"Blowfish\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMCCase2: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2: void go(java.lang.String)>[0@L12] keyGen = invokestatic javax.crypto.KeyGenerator.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "Blowfish",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c4 = \"Blowfish\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2: void go()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2: void go()>[1@L12] keyGen = invokestatic javax.crypto.KeyGenerator.getInstance($-c4)",
  "var" : "$-c4",
  "constantValue" : "Blowfish",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "keyAlgo = \"DES\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1: void go(java.lang.String,java.lang.String)>[0@L12] keyGen = invokestatic javax.crypto.KeyGenerator.getInstance(keyAlgo)",
  "var" : "keyAlgo",
  "constantValue" : "DES",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "key = \"DES\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11: void method1(java.lang.String,java.lang.String)>[0@L16] keyGen = invokestatic javax.crypto.KeyGenerator.getInstance(cryptoKey)",
  "var" : "cryptoKey",
  "constantValue" : "DES",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"Blowfish\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12: void method1(java.lang.String)>[0@L15] keyGen = invokestatic javax.crypto.KeyGenerator.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "Blowfish",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "void method1(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c0 = \"Blowfish\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6: void go2()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6: void go()>[2@L15] keyGen = invokestatic javax.crypto.KeyGenerator.getInstance($-v5)",
  "var" : "$-v5",
  "constantValue" : "Blowfish",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "crypto = \"Blowfish\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2: void go(java.lang.String)>[0@L12] keyGen = invokestatic javax.crypto.KeyGenerator.getInstance(crypto)",
  "var" : "crypto",
  "constantValue" : "Blowfish",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"DES\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5: void go2()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5: void go()>[2@L20] keyGen = invokestatic javax.crypto.KeyGenerator.getInstance($-v5)",
  "var" : "$-v5",
  "constantValue" : "DES",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c4 = \"DES\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1: void go()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1: void go()>[1@L13] keyGen = invokestatic javax.crypto.KeyGenerator.getInstance($-c4)",
  "var" : "$-c4",
  "constantValue" : "DES",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "void go()"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "cryptokey = \"DES\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMCCase1: void main(java.lang.String[])>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1: void go(java.lang.String,java.lang.String)>[0@L12] keyGen = invokestatic javax.crypto.KeyGenerator.getInstance(cryptoKey)",
  "var" : "cryptoKey",
  "constantValue" : "DES",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "void go(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Pattern Match",
  "message" : "The pattern is not matched for the API",
  "sourceStmt" : "$-c2 = \"Blowfish\"",
  "sourceMethod" : "<org.cryptoapi.bench.brokencrypto.BrokenCryptoABSCase2: void <init>()>",
  "callSite" : "<org.cryptoapi.bench.brokencrypto.Crypto3: byte[] encrypt(java.lang.String,java.lang.String)>[4@L28] keyGen = invokestatic javax.crypto.KeyGenerator.getInstance($-v9)",
  "var" : "$-v9",
  "constantValue" : "Blowfish",
  "calleeMethod" : "<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
  "subSignature" : "byte[] encrypt(java.lang.String,java.lang.String)"
}, {
  "judgeType" : "Influencing Factory",
  "message" : "Concerned var in this method has no influencing stmts",
  "calleeMethod" : "<org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase1: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>",
  "subSignature" : "void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)"
}, {
  "judgeType" : "Influencing Factory",
  "message" : "Concerned var in this method has no influencing stmts",
  "calleeMethod" : "<org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase1: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>",
  "subSignature" : "void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)"
}, {
  "judgeType" : "Influencing Factory",
  "message" : "Concerned var in this method has no influencing stmts",
  "calleeMethod" : "<org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase2: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>",
  "subSignature" : "void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)"
}, {
  "judgeType" : "CompositeRule",
  "issues" : [ {
    "judgeType" : "Number Size",
    "message" : "The number size is not allowed for the API",
    "sourceStmt" : "keySize = 1024",
    "sourceMethod" : "<org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMCCase1: void main(java.lang.String[])>",
    "callSite" : "<org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1: void go(int)>[2@L14] invokevirtual kgp.initialize(keySize)",
    "var" : "keySize",
    "constantValue" : "1024",
    "calleeMethod" : "<java.security.KeyPairGenerator: void initialize(int)>",
    "numberSize" : "2048-10000",
    "subSignature" : "void go(int)"
  } ]
}, {
  "judgeType" : "CompositeRule",
  "issues" : [ {
    "judgeType" : "Number Size",
    "message" : "The number size is not allowed for the API",
    "sourceStmt" : "key = 1024",
    "sourceMethod" : "<org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3: void main(java.lang.String[])>",
    "callSite" : "<org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3: void method1(int)>[2@L19] invokevirtual kgp.initialize(key)",
    "var" : "key",
    "constantValue" : "1024",
    "calleeMethod" : "<java.security.KeyPairGenerator: void initialize(int)>",
    "numberSize" : "2048-10000",
    "subSignature" : "void method1(int)"
  } ]
}, {
  "judgeType" : "CompositeRule",
  "issues" : [ {
    "judgeType" : "Number Size",
    "message" : "The number size is not allowed for the API",
    "sourceStmt" : "keysize = 1024",
    "sourceMethod" : "<org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1: void go()>",
    "callSite" : "<org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1: void go()>[3@L11] invokevirtual kgp.initialize(keysize)",
    "var" : "keysize",
    "constantValue" : "1024",
    "calleeMethod" : "<java.security.KeyPairGenerator: void initialize(int)>",
    "numberSize" : "2048-10000",
    "subSignature" : "void go()"
  } ]
}, {
  "judgeType" : "CompositeRule",
  "issues" : [ {
    "judgeType" : "Number Size",
    "message" : "The number size is not allowed for the API",
    "sourceStmt" : "keysize = 1024",
    "sourceMethod" : "<org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABPSCase1: void go(int)>",
    "callSite" : "<org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABPSCase1: void go(int)>[6@L16] invokevirtual kgp.initialize(keysize)",
    "var" : "keysize",
    "constantValue" : "1024",
    "calleeMethod" : "<java.security.KeyPairGenerator: void initialize(int)>",
    "numberSize" : "2048-10000",
    "subSignature" : "void go(int)"
  } ]
}, {
  "judgeType" : "CompositeRule",
  "issues" : [ {
    "judgeType" : "Number Size",
    "message" : "The number size is not allowed for the API",
    "sourceStmt" : "keySize = 1024",
    "sourceMethod" : "<org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1: void main(java.lang.String[])>",
    "callSite" : "<org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1: void go(int)>[2@L13] invokevirtual kgp.initialize(keySize)",
    "var" : "keySize",
    "constantValue" : "1024",
    "calleeMethod" : "<java.security.KeyPairGenerator: void initialize(int)>",
    "numberSize" : "2048-10000",
    "subSignature" : "void go(int)"
  } ]
}, {
  "judgeType" : "CompositeRule",
  "issues" : [ {
    "judgeType" : "Number Size",
    "message" : "The number size is not allowed for the API",
    "sourceStmt" : "$-c0 = 1024",
    "sourceMethod" : "<org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2: void go2()>",
    "callSite" : "<org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2: void main(java.lang.String[])>[8@L42] invokevirtual kgp.initialize($-v6)",
    "var" : "$-v6",
    "constantValue" : "1024",
    "calleeMethod" : "<java.security.KeyPairGenerator: void initialize(int)>",
    "numberSize" : "2048-10000",
    "subSignature" : "void main(java.lang.String[])"
  } ]
} ]